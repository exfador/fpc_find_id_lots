from __future__ import annotations

from os.path import exists
from typing import TYPE_CHECKING

import telebot

if TYPE_CHECKING:
    from exfa import exfa

import FunPayAPI.types
from FunPayAPI.account import Account
from logging import getLogger
from telebot.types import Message
from tg_bot import static_keyboards as skb
import time
import json

NAME = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–æ—Ç–æ–≤ –ø–æ ID"
VERSION = "0.1"
DESCRIPTION = "–î–∞–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—Ç—å –ª–æ—Ç—ã –ø–æ –∏—Ö ID."
CREDITS = "@exfador"
UUID = "32811ab3-2474-466a-846e-5165d4f1c17b"
SETTINGS_PAGE = False

logger = getLogger("FPC.lots_find_id")
RUNNING = False



def init_commands(exfa: exfa):
    if not exfa.telegram:
        return
    tg = exfa.telegram
    bot = exfa.telegram.bot

    def get_current_account(tg_msg: Message) -> FunPayAPI.types.UserProfile:
        attempts = 3
        while attempts:
            try:
                profile = exfa.account.get_user(exfa.account.id)
                return profile
            except:
                logger.error("[–ê–í–¢–û–õ–û–¢–´] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.")
                logger.debug("TRACEBACK", exc_info=True)
                time.sleep(1)
                attempts -= 1
        else:
            bot.send_message(tg_msg.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.")
            raise Exception

    def get_lots_info(tg_msg: Message, profile: FunPayAPI.types.UserProfile, subcategory_ids: list[int]) -> list[dict]:
        result = []
        for i in profile.get_lots():
            if i.subcategory.id not in subcategory_ids:
                continue
            
            if i.subcategory.type == FunPayAPI.types.SubCategoryTypes.CURRENCY:
                continue
            
            attempts = 3
            while attempts:
                try:
                    lot_fields = exfa.account.get_lot_fields(i.id)
                    fields = lot_fields.fields
                    
                    if "secrets" in fields.keys():
                        if not settings.get("with_secrets"):
                            fields["secrets"] = ""
                            del fields["auto_delivery"]
                    
                    lot_info = {
                        "id": i.id,
                        "description": i.description,
                        "category_id": i.subcategory.category.id,
                        "category_name": i.subcategory.category.name,
                        "subcategory_id": i.subcategory.id,
                        "subcategory_name": i.subcategory.name,
                        "fields": fields
                    }
                    
                    logger.info(f"[–ê–í–¢–û–õ–û–¢–´] –õ–æ—Ç {i.id} {i.description} –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {i.subcategory.category.name} (ID: {i.subcategory.category.id}) –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {i.subcategory.name} (ID: {i.subcategory.id}).")
                    
                    result.append(lot_info)
                    logger.info(f"[–ê–í–¢–û–õ–û–¢–´] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –ª–æ—Ç–µ {i.id} {i.description}. –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {i.subcategory.category.name}, –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {i.subcategory.name}")
                    break
                except Exception as e:
                    logger.error(f"[–ê–í–¢–û–õ–û–¢–´] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ª–æ—Ç–µ {i.id} {i.description}.")
                    logger.debug("TRACEBACK", exc_info=True)
                    time.sleep(2)
                    attempts -= 1
            else:
                bot.send_message(tg_msg.chat.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ <a href=\"https://funpay.com/lots/offer?id={i.id}\">–ª–æ—Ç–µ {i.id} {i.description}</a>. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
                time.sleep(1)
                continue
            time.sleep(0.5)
        return result

    def lots_find_id(m: Message):
        global RUNNING
        if RUNNING:
            bot.send_message(m.chat.id, "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ—Ç–æ–≤ —É–∂–µ –Ω–∞—á–∞—Ç! –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.")
            return
        RUNNING = True
        try:
            bot.send_message(m.chat.id, f"–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ñ–∏–ª–µ...")
            profile = get_current_account(m)

            settings_auto_path = "storage/plugins/settings_auto.json"
            if exists(settings_auto_path):
                with open(settings_auto_path, "r", encoding="utf-8") as f:
                    settings_auto = json.loads(f.read())
                    subcategory_ids = settings_auto.get("subcategory_ids", [])
            else:
                subcategory_ids = []

            if not subcategory_ids:
                bot.send_message(m.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å subcategory_ids –∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>/set_subcategories 703, 732</code>, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å.", parse_mode='HTML')
                RUNNING = False
                return

            result = []
            for i in get_lots_info(m, profile, subcategory_ids):
                fields = i["fields"]
                del fields["csrf_token"]
                del fields["offer_id"]
                result.append(fields)

            with open("storage/cache/lots.json", "w", encoding="utf-8") as f:
                f.write(json.dumps(result, indent=4, ensure_ascii=False))
            with open("storage/cache/lots.json", "r", encoding="utf-8") as f:
                bot.send_document(m.chat.id, f)

            auto_lots_path = "storage/cache/auto_lots.json"
            auto_lots_data = {
                "lot_mapping": {},
                "chat_id": 8171383326,
            }

            if exists(auto_lots_path):
                with open(auto_lots_path, "r", encoding="utf-8") as f:
                    auto_lots_data = json.loads(f.read())

            current_lots = auto_lots_data["lot_mapping"]

            for idx, lot in enumerate(result, start=1):
                lot_name = lot.get("fields[summary][ru]", "")
                service_id = 1 
                quantity = 1 

                if not any(lot_info["name"] == lot_name for lot_info in current_lots.values()):
                    new_lot_key = f"lot_{len(current_lots) + 1}"
                    current_lots[new_lot_key] = {
                        "name": lot_name,
                        "service_id": service_id,
                        "quantity": quantity
                    }

            auto_lots_data["lot_mapping"] = current_lots
            with open(auto_lots_path, "w", encoding="utf-8") as f:
                f.write(json.dumps(auto_lots_data, indent=4, ensure_ascii=False))

            RUNNING = False
        except Exception as e:
            RUNNING = False
            logger.error("[–ê–í–¢–û–õ–û–¢–´] –ù–µ —É–¥–∞–ª–æ—Å—å –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –ª–æ—Ç—ã.")
            logger.debug("TRACEBACK", exc_info=True)
            bot.send_message(m.chat.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –ª–æ—Ç—ã. –û—à–∏–±–∫–∞: {str(e)}")
            return
        
    def set_subcategories(m: Message):
        try:
            text = m.text.strip().replace("/set_subcategories", "").strip()
            subcategory_ids = [int(id.strip()) for id in text.split(",") if id.strip().isdigit()]

            if not subcategory_ids:
                bot.send_message(m.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 732, 704).")
                return

            settings_auto_path = "storage/plugins/settings_auto.json"
            settings_auto = {"subcategory_ids": subcategory_ids}
            with open(settings_auto_path, "w", encoding="utf-8") as f:
                f.write(json.dumps(settings_auto, indent=4, ensure_ascii=False))

            bot.send_message(m.chat.id, f"üü¢ Subcategory_ids —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {subcategory_ids}")
            logger.info(f"[–ê–í–¢–û–õ–û–¢–´] Subcategory_ids –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {subcategory_ids}")
        except Exception as e:
            logger.error("[–ê–í–¢–û–õ–û–¢–´] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å subcategory_ids.")
            logger.debug("TRACEBACK", exc_info=True)
            bot.send_message(m.chat.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å subcategory_ids. –û—à–∏–±–∫–∞: {str(e)}")

    def show_lots_ids(m: Message):
        settings_auto_path = "storage/plugins/settings_auto.json"
        if exists(settings_auto_path):
            with open(settings_auto_path, "r", encoding="utf-8") as f:
                settings_auto = json.loads(f.read())
                subcategory_ids = settings_auto.get("subcategory_ids", [])
                if subcategory_ids:
                    bot.send_message(m.chat.id, f"üü¢ –¢–µ–∫—É—â–∏–µ ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: <code>{', '.join(map(str, subcategory_ids))}</code>", parse_mode='HTML')
                else:
                    bot.send_message(m.chat.id, "üü° –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        else:
            bot.send_message(m.chat.id, "‚ùå –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    def delete_lots_ids(m: Message):
        try:
            text = m.text.strip().replace("/delete_lots_id", "").strip()
            ids_to_delete = [int(id.strip()) for id in text.split(",") if id.strip().isdigit()]

            if not ids_to_delete:
                bot.send_message(m.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 732, 704).")
                return
            settings_auto_path = "storage/plugins/settings_auto.json"
            if exists(settings_auto_path):
                with open(settings_auto_path, "r", encoding="utf-8") as f:
                    settings_auto = json.loads(f.read())
                    subcategory_ids = settings_auto.get("subcategory_ids", [])
                subcategory_ids = [id for id in subcategory_ids if id not in ids_to_delete]

                settings_auto["subcategory_ids"] = subcategory_ids
                with open(settings_auto_path, "w", encoding="utf-8") as f:
                    f.write(json.dumps(settings_auto, indent=4, ensure_ascii=False))

                bot.send_message(m.chat.id, f"üü¢ ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã. –¢–µ–∫—É—â–∏–µ ID: {', '.join(map(str, subcategory_ids))}")
                logger.info(f"[–ê–í–¢–û–õ–û–¢–´] ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π —É–¥–∞–ª–µ–Ω—ã: {ids_to_delete}")
            else:
                bot.send_message(m.chat.id, "‚ùå –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            logger.error("[–ê–í–¢–û–õ–û–¢–´] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
            logger.debug("TRACEBACK", exc_info=True)
            bot.send_message(m.chat.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π. –û—à–∏–±–∫–∞: {str(e)}")

    exfa.add_telegram_commands(UUID, [
        ("lots_find_id", "–∫—ç—à–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã –≤ —Ñ–∞–π–ª", True),
        ("set_subcategories", "—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ—Ç–æ–≤", True),
        ("lots_ids", "–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π", True),
        ("delete_lots_id", "—É–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π", True),
    ])

    tg.msg_handler(lots_find_id, commands=["lots_find_id"])
    tg.msg_handler(set_subcategories, commands=["set_subcategories"])
    tg.msg_handler(show_lots_ids, commands=["lots_ids"])
    tg.msg_handler(delete_lots_ids, commands=["delete_lots_id"])

    settings_auto_path = "storage/plugins/settings_auto.json"
    if exists(settings_auto_path):
        with open(settings_auto_path, "r", encoding="utf-8") as f:
            settings_auto = json.loads(f.read())
            logger.info(f"[–ê–í–¢–û–õ–û–¢–´] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ subcategory_ids –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {settings_auto.get('subcategory_ids', [])}")
    else:
        logger.info("[–ê–í–¢–û–õ–û–¢–´] –§–∞–π–ª settings_auto.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

BIND_TO_PRE_INIT = [init_commands]
BIND_TO_DELETE = None